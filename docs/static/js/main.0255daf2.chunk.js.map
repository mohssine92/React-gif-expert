{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","InputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","category","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMA8DeA,EAzDY,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAG1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KA6BC,OAGM,sBAAMC,SAxBQ,SAACC,GAClBA,EAAEC,iBAGCJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAKX,MAAM,CAAEP,GAAR,mBAAuBO,OAE1BN,EAAc,MAYZ,SAEE,uBACGO,KAAK,OACLC,MAAOT,EACPU,SAnCc,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCRZG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,8DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EAC1B,MAAO,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVrB,kBAgBZM,GAhBY,4CAAH,sDCWTO,EAZY,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGjC,OACI,sBAAKc,UAAU,0CAAf,UACE,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QC2BAO,EA9BQ,SAAC,GAAiB,IAAhBnB,EAAe,EAAfA,UAKrB,ECFwB,SAACoB,GAG1B,MAA0BlC,mBAAS,CACjCqB,KAAM,GACNc,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KA0BA,OAlBAC,qBAAU,WACRzB,EAAQqB,GACJK,MAAM,SAAAC,GAEHH,EAAS,CACPhB,KAAMmB,EACNL,SAAQ,SAOhB,CAACD,IAKGE,ED3B4BK,CAAa3B,GAAlCa,EAAb,EAAQN,KAAcc,EAAtB,EAAsBA,QAEtB,OAEI,qCACA,oBAAIL,UAAU,mCAAd,SAAkDhB,IAClD,sBAAKgB,UAAU,YAAf,UACMK,GAAW,mBAAGL,UAAU,qCAAb,wBAETH,EAAOJ,KAAK,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEMA,GADCA,EAAIC,cEuBfiB,EArCM,WAIlB,MAAoC1C,mBAAS,CAAC,gBAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAGA,OACE,qCACG,8CAEA,cAAC,EAAD,CAAaA,cAAeA,IAG5B,uBAEA,6BAEI4C,EAAWpB,KAAK,SAAAW,GAAQ,OACrB,cAAC,EAAD,CAEQpB,UAAWoB,GADNA,Y,MClB5BU,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0255daf2.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {  /* desestructurando props */\r\n   \r\n  /* use state , cambia valor inicial / valor por defecto  con valor actual */\r\n   const [InputValue, setInputValue] = useState('') /* se inicializa con string vacio o valor de any type , undefined no */\r\n\r\n   const handleInputChange = (e) =>{\r\n      setInputValue(e.target.value);  \r\n      // console.log(InputValue)\r\n     \r\n   } /* InputValue ouede descir que es la variable de hook useState   */\r\n\r\n   const handleSubmit = (e) =>{\r\n       e.preventDefault()\r\n  \r\n    \r\n       if(InputValue.trim().length > 2 ){\r\n        setCategories(cats =>{\r\n\r\n          // TODO : aqui debe no permitir tener repetido dos terminos en la colecionn \r\n          //  console.log(cats);  \r\n           \r\n           return [InputValue, ...cats]}); // ordena empujo primero la ultimo termino escrito \r\n      \r\n        setInputValue('');\r\n        \r\n       }\r\n\r\n \r\n      \r\n   }\r\n  \r\n   \r\n    return (\r\n        \r\n        \r\n          <form onSubmit={handleSubmit}>\r\n\r\n            <input\r\n               type=\"text\"\r\n               value={InputValue}\r\n               onChange={handleInputChange}\r\n              \r\n            />\r\n            \r\n         </form>\r\n                 \r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n setCategories: PropTypes.func.isRequired\r\n\r\n    \r\n}\r\n  \r\n\r\nexport default AddCategory;\r\n","\r\n\r\n  \r\n    export const getGifs = async (categoria) => {\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(categoria) }&limit=5&api_key=Qy9DqLL5slh4KvhGYxzLOaFFZFOpXDFz`;\r\n        const resp = await fetch(url);\r\n        const { data } = await resp.json();\r\n        \r\n        /* data trae mucha infs que ami no me interesa , por ello hacer uso de map para crear objeto solo con infs que me interesa */\r\n        const gifs = data.map( img =>{\r\n           return {\r\n              id: img.id,  //Extraer\r\n              title: img.title,\r\n              url: img.images?.downsized_medium.url\r\n              \r\n           }\r\n  \r\n        })\r\n       \r\n        return gifs;\r\n      \r\n       \r\n  \r\n    }\r\n  ","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url}) => {\r\n    \r\n   \r\n    return (\r\n        <div className=\"card animate__animated animate__bounce \">\r\n          <img src={ url } alt={ title } />\r\n          <p>{ title }</p>  \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default GifGridItem;","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({categoria}) => {\r\n    // Recuerda , si se cambia estado del comp√≤nente se renderiza de nuevo , si no queremos condicionar algun renderizacion usamos hook useEffect()\r\n   \r\n  \r\n    // Custom Hook\r\n    const { data:images , loading } = useFetchGifs(categoria);  // peticion Http\r\n   \r\n    return (\r\n\r\n        <>\r\n        <h3 className=\"animate__animated animate__hinge\">{categoria}</h3>\r\n        <div className=\"card-grid\">\r\n            { loading && <p className=\"animate__animated animate__fadeOut\">Loading...</p>}\r\n            {\r\n                images.map( img =>(\r\n                   <GifGridItem\r\n                     key={img.id}\r\n                     {...img} \r\n                   /> \r\n                ))\r\n            }\r\n\r\n        </div>\r\n\r\n   \r\n       </>   \r\n    )\r\n}\r\n\r\n\r\nexport default GifGrid;\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n\r\n\r\n\r\n// customs hooks funcionan como se fueran funciones componente tambien tiene estado , puden tener efectos , reducer , contextos etc ...  \r\nexport const useFetchGifs = (category) => {\r\n   \r\n   //  Definir estado del Hook cutom\r\n   const [state, setstate] = useState({\r\n     data: [],\r\n     loading: true   \r\n   });\r\n\r\n\r\n\r\n  // Hook de efecto , controlar ejecucuion del scope \r\n   useEffect(() => {\r\n     getGifs(category)\r\n        .then( imgs => {\r\n        \r\n            setstate({\r\n              data: imgs,\r\n              loading:false\r\n            }); \r\n  \r\n         \r\n        })\r\n      \r\n    \r\n   }, [category]) // condicion de ejecucion , primer renederizacion del hook y cualquier cambio en category \r\n   \r\n   \r\n  \r\n\r\n   return state; // state sera mandada 2 veces en este caso \r\n\r\n\r\n}\r\n","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\n\r\n\r\n/* Function component */\r\nconst GifExpertApp = () => {\r\n\r\n  \r\n   // Hook useState , dar variable de estado al componente de fincion, asi cualquier cambio se renderiza componente ,\r\n   const [categories, setCategories] = useState(['Dragon Ball']);\r\n\r\n   \r\n   return(\r\n     <>\r\n        <h2>GifExpertApp</h2>\r\n\r\n        <AddCategory setCategories={setCategories}  />\r\n        \r\n\r\n        <hr />\r\n          \r\n        <ol>\r\n          {\r\n            categories.map( category  => (\r\n               <GifGrid\r\n                       key={category} \r\n                       categoria={category} \r\n                        \r\n               /> \r\n            ))\r\n         }\r\n        </ol>   \r\n       \r\n     </>\r\n\r\n   );\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default GifExpertApp;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}